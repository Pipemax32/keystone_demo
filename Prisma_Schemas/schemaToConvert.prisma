// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String
  email            String
  password         String
  phone            String
  identification   String
  isEmailValidated Boolean  @map("is_email_validated")
  active           Boolean
  lastLogin        DateTime @map("last_login")
  createdAt        DateTime @map("created_at")
  updatedAt        DateTime @map("updated_at")

  permissionGroupsAuthored PermissionGroup[] @relation("PermissionGroupsAuthoredToUser")

  productTypes     ProductType[]
  attributes       Attribute[]
  permissionGroups PermissionGroup[] @relation("PermissionGroupsToUser")
  publishers       Publisher[]
  collections      Collection[]
  products         Product[]
  productsVariants ProductVariant[]
  pricings         Pricing[]
  discounts        Discount[]
  channels         Channel[]
  warehouses       Warehouse[]
}

model PermissionGroup {
  id           Int      @id @default(autoincrement())
  publisherId  Int      @map("publisher_id") //FK
  name         String
  slug         String
  authorUserId Int      @map("author_user_id")
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @map("updated_at")

  authorUser User      @relation("PermissionGroupsAuthoredToUser", fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  user       User[] @relation("PermissionGroupsToUser")
  permission Permission[]
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String

  permissionGroup PermissionGroup[]
}

model Product {
  id                      Int      @id @default(autoincrement())
  publisherId             Int      @map("publisher_id") // FK
  defaultVariantId        Int      @map("default_variant_id")
  name                    String
  slug                    String
  defaultAttributesValues String[] @map("default_attributes_values")
  isPublished             Boolean  @map("is_published")
  brand                   String
  authorUserId            Int      @map("author_user_id")
  createdAt           DateTime @map("created_at")
  updatedAt         DateTime @map("updated_at")

  publisher  Publisher @relation(fields: [publisherId], references: [id])
  authorUser User      @relation(fields: [authorUserId], references: [id])

  productVariant    ProductVariant[]
  productType       ProductType[]
  tag       Tag[]
  category   Category[]
  collection Collection[]
}

model ProductVariant {
  id                       Int      @id @default(autoincrement())
  stockId                  Int      @map("stock_id") // FK
  pricingId                Int      @map("pricing_id") // FK
  productId                Int      @map("product_id") // FK
  sku                      String
  extensionName            String   @map("extension_name")
  slug                     String
  barcode                  Int
  imagesUrl                String[] @map("images_url")
  mediaUrl                 String[] @map("media_url")
  attributesVariantsValues String[] @map("attributes_variants_values")
  description              String
  weight                   Int
  revenue                  Int
  authorUserId             Int @map("author_user_id")
  createdAt                DateTime @map("created_at")
  updatedAt                DateTime @map("updated_at")

  product                      Product                        @relation(fields: [productId], references: [id])
  pricing                      Pricing                        @relation(fields: [pricingId], references: [id])
  productPayment ProductPayment[]
  authorUser                   User                           @relation(fields: [authorUserId], references: [id])
  channel        Channel[]
  fullfilment    Fullfilment[]
  productStock                 ProductStock                   @relation(fields: [stockId], references: [id])
}

model Pricing {
  id           Int      @id @default(autoincrement())
  currency     String
  listPrice    Decimal  @map("list_price")
  costPrice    Decimal  @map("cost_price")
  status       String
  authorUserId Int      @map("author_user_id") // FK
  startsAt     DateTime @map("starts_at")
  endsAt       DateTime @map("ends_at")

  authorUser      User              @relation(fields: [authorUserId], references: [id])
  productVariant  ProductVariant[]
  discount Discount[]
  channel  Channel[]
}

model Discount {
  id           Int      @id @default(autoincrement())
  publisherId  Int      @map("publisher_id") //FK
  code         Int
  isDisabled   Boolean  @map("is_disabled")
  usageLimit   Int      @map("usage_limit")
  status       Boolean
  priority     Int
  authorUserId Int      @map("author_user_id") // FK
  startsAt     DateTime @map("starts_at")
  endsAt       DateTime @map("ends_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  pricing Pricing[]
  channel Channel[]
  discountRule    DiscountRule[]
}

model DiscountRule {
  id          Int    @id @default(autoincrement())
  discountId  Int    @map("dicount_id")
  type        String
  value       String
  allocation  String
  description String
  conditions  String

  discount Discount @relation(fields: [discountId], references: [id])
}

model ProductType {
  id                   Int      @id @default(autoincrement())
  productId            Int      @map("product_id") // FK
  publisherId          Int      @map("publisher_id") //FK
  name                 String
  slug                 String
  defaultAttributesId  Int[]    @map("defualt_attributes_id")
  attributesVariantsId Int[]    @map("attributes_variants_id")
  isShippingRequired   Boolean  @map("is_shipping_required")
  authorUserId         Int      @map("author_user_id") // FK
  createdAt            DateTime @map("created_at")
  updatedAt            DateTime @map("updated_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  attribute Attribute[]
}

model Attribute {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String
  choices      String[]
  isRequired   Boolean  @map("is_required")
  isVisible    Boolean  @map("is_visible")
  isFilterable Boolean  @map("is_filterable")
  authorUserId Int      @map("author_user_id") // FK
  publisherId  Int      @map("publisher_id") // FK
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @map("updated_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  productType ProductType[]
}

model ProductPayment {
  id            Int    @id @default(autoincrement())
  orderId       Int    @map("order_id")
  paymentMethod String @map("payment_method")
  transaction   String

  order                        Order                          @relation(fields: [orderId], references: [id])
  productVariant ProductVariant[]
}

model Tag {
  id         Int          @id @default(autoincrement())
  value      String
  createdAt  DateTime     @map("created_at")
  updatedAt  DateTime     @map("updated_at")
  product Product[]
}

model Category {
  id               Int      @id @default(autoincrement())
  name             String
  parentCategoryId Int?     @map("parent_category_id") // FK?
  createdAt        DateTime @map("created_at")
  updatedAt        DateTime @map("updated_at")

  parentCategory     Category?         @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  childrenCategories Category[]        @relation("ParentCategory")
  product    Product[]
}

model Collection {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String
  isVisible    Boolean  @map("is_visible")
  description  String
  authorUserId Int      @map("author_user_id") // FK
  publisherId  Int      @map("publisher_id")
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @map("updated_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  product Product[]
}

model Publisher {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String
  logo         Json
  phone        Int
  country      String
  description  String
  socialMedias String[] @map("social_medias")
  authorUserId Int      @map("author_userId")
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @map("updated_at")

  authorUser User @relation(fields: [authorUserId], references: [id])

  attributes       Attribute[]
  productsTypes    ProductType[]
  products         Product[]
  permissionGroups PermissionGroup[]
  commisions       Commision[]
  warehouses       Warehouse[]
  discount         Discount[]
  channels         Channel[]
  collection       Collection[]

}

model Commision {
  id               Int    @id @default(autoincrement())
  publisherId      Int    @map("publisher_id") // FK
  fixCost          Int    @map("fix_cost")
  percentageCost   Int    @map("percentage_cost")
  custom_func_cost String @map("custon_func_cost")

  publisher Publisher @relation(fields: [publisherId], references: [id])

}

model Channel {
  id           Int      @id @default(autoincrement())
  publisherId  Int      @map("publisher_id")
  name         String
  slug         String
  isActive     Boolean  @map("is_active")
  currencyCode String   @map("currency_code")
  authorUserId Int      @map("author_user_id")
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @map("updated_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  channelPaymentMethod ChannelPaymentMethod[]
  ProductVariant         ProductVariant[]
  Pricing                Pricing[]
  ShippingMethods        ShippingMethod[]
  Discounts              Discount[]
  Warehouse              Warehouse[]
}
model Warehouse {
  id            Int      @id @default(autoincrement())
  stockId       Int      @map("stock_id") // FK
  publisherId   Int      @map("publisher_id") // FK
  name          String
  slug          String
  shippingZones Json     @map("shipping_zones")
  authorUserId  Int      @map("author_user_id")
  createdAt     DateTime @map("created_at")
  updatedAt     DateTime @map("updated_at")

  authorUser User      @relation(fields: [authorUserId], references: [id])
  publisher  Publisher @relation(fields: [publisherId], references: [id])

  productStock     ProductStock[]
  channel Channel[]
  Address          Address?
}

model Order {
  id            Int      @id @default(autoincrement())
  status        String
  subtotal      Decimal
  total         Decimal
  balancedTotal Decimal  @map("balanced_total")
  createdAt     DateTime @map("created_at")
  updatedAt     DateTime @map("updated_at")

  productPayment  ProductPayment[]
  ShippingCarrier ShippingCarrier?
}

model ShippingCarrier {
  id       Int     @id @default(autoincrement())
  orderId  Int     @unique @map("order_id") // FK
  name     String
  currency String
  amount   Decimal

  order       Order         @relation(fields: [orderId], references: [id])
  Fullfilment Fullfilment[]
}

model Fullfilment {
  id                Int     @id @default(autoincrement())
  shippingCarrierId Int     @map("shipping_carrier_id")
  email             String
  shippedAt         String  @map("shipped_at")
  status            Boolean

  shippingCarrier ShippingCarrier @relation(fields: [shippingCarrierId], references: [id])

  productVariant ProductVariant[]
  Tracking                  Tracking?
}

model Tracking {
  id             Int      @id @default(autoincrement())
  fullfilmentId  Int      @unique @map("fullfilment_id") // FK
  trackingNumber Int      @map("tracking_number")
  url            String
  createdAt      DateTime @map("created_at")
  updatedAt      DateTime @map("updated_at")

  fullfilment Fullfilment @relation(fields: [fullfilmentId], references: [id])
}

model ChannelPaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String
  isAvailable Boolean @map("is_available")

  channel Channel[]
}

model Address {
  id           Int    @id @default(autoincrement())
  warehouseId  Int    @map("warehouse_id") @unique
  country      String
  countryArea  String @map("country_area")
  city         String
  zipCode      String @map("zip_code")
  streetAdress String @map("street_address")
  extraDetails String @map("extra_details")

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
}

model ShippingMethod {
  id           Int    @id @default(autoincrement())
  name         String
  currency     String
  amount       Float
  requeriments Json

  channel Channel[]
}

model ProductStock {
  id          Int    @id @default(autoincrement())
  sku         String
  stock       Int
  warehouseId Int    @map("warehouse_id")

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  productVariant ProductVariant[]
}