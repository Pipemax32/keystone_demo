# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  phone: String
  identification: String
  isEmailValidated: Boolean
  active: Boolean
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  permissionGroup(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroupCount(where: PermissionGroupWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publishersCount(where: PublisherWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  identification: StringNullableFilter
  isEmailValidated: BooleanFilter
  active: BooleanFilter
  lastLogin: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  permissionGroup: PermissionGroupManyRelationFilter
  publishers: PublisherManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PermissionGroupManyRelationFilter {
  every: PermissionGroupWhereInput
  some: PermissionGroupWhereInput
  none: PermissionGroupWhereInput
}

input PublisherManyRelationFilter {
  every: PublisherWhereInput
  some: PublisherWhereInput
  none: PublisherWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  identification: OrderDirection
  isEmailValidated: OrderDirection
  active: OrderDirection
  lastLogin: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phone: String
  identification: String
  isEmailValidated: Boolean
  active: Boolean
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  permissionGroup: PermissionGroupRelateToManyForUpdateInput
  publishers: PublisherRelateToManyForUpdateInput
}

input PermissionGroupRelateToManyForUpdateInput {
  disconnect: [PermissionGroupWhereUniqueInput!]
  set: [PermissionGroupWhereUniqueInput!]
  create: [PermissionGroupCreateInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

input PublisherRelateToManyForUpdateInput {
  disconnect: [PublisherWhereUniqueInput!]
  set: [PublisherWhereUniqueInput!]
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  phone: String
  identification: String
  isEmailValidated: Boolean
  active: Boolean
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  permissionGroup: PermissionGroupRelateToManyForCreateInput
  publishers: PublisherRelateToManyForCreateInput
}

input PermissionGroupRelateToManyForCreateInput {
  create: [PermissionGroupCreateInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

input PublisherRelateToManyForCreateInput {
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

type PermissionGroup {
  id: ID!
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: User
  publisher: Publisher
  user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  userCount(where: UserWhereInput! = {}): Int
  permission(
    where: PermissionWhereInput! = {}
    orderBy: [PermissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Permission!]
  permissionCount(where: PermissionWhereInput! = {}): Int
}

input PermissionGroupWhereUniqueInput {
  id: ID
}

input PermissionGroupWhereInput {
  AND: [PermissionGroupWhereInput!]
  OR: [PermissionGroupWhereInput!]
  NOT: [PermissionGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  authorUser: UserWhereInput
  publisher: PublisherWhereInput
  user: UserManyRelationFilter
  permission: PermissionManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PermissionManyRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input PermissionGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PermissionGroupUpdateInput {
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: UserRelateToOneForUpdateInput
  publisher: PublisherRelateToOneForUpdateInput
  user: UserRelateToManyForUpdateInput
  permission: PermissionRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PermissionRelateToManyForUpdateInput {
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionGroupUpdateArgs {
  where: PermissionGroupWhereUniqueInput!
  data: PermissionGroupUpdateInput!
}

input PermissionGroupCreateInput {
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: UserRelateToOneForCreateInput
  publisher: PublisherRelateToOneForCreateInput
  user: UserRelateToManyForCreateInput
  permission: PermissionRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PermissionRelateToManyForCreateInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

type Permission {
  id: ID!
  name: String
  permissionGroup(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroupCount(where: PermissionGroupWhereInput! = {}): Int
}

input PermissionWhereUniqueInput {
  id: ID
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  name: StringFilter
  permissionGroup: PermissionGroupManyRelationFilter
}

input PermissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PermissionUpdateInput {
  name: String
  permissionGroup: PermissionGroupRelateToManyForUpdateInput
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  name: String
  permissionGroup: PermissionGroupRelateToManyForCreateInput
}

type Publisher {
  id: ID!
  name: String
  slug: String
  logo: JSON
  phone: Int
  country: String
  description: String
  socialMedias: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: User
  permissionGroups(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroupsCount(where: PermissionGroupWhereInput! = {}): Int
  commisions: Commision
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  phone: IntFilter
  country: StringFilter
  description: StringFilter
  socialMedias: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  authorUser: UserWhereInput
  permissionGroups: PermissionGroupManyRelationFilter
  commisions: CommisionWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PublisherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  phone: OrderDirection
  country: OrderDirection
  description: OrderDirection
  socialMedias: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PublisherUpdateInput {
  name: String
  slug: String
  logo: JSON
  phone: Int
  country: String
  description: String
  socialMedias: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: UserRelateToOneForUpdateInput
  permissionGroups: PermissionGroupRelateToManyForUpdateInput
  commisions: CommisionRelateToOneForUpdateInput
}

input CommisionRelateToOneForUpdateInput {
  create: CommisionCreateInput
  connect: CommisionWhereUniqueInput
  disconnect: Boolean
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  name: String
  slug: String
  logo: JSON
  phone: Int
  country: String
  description: String
  socialMedias: String
  createdAt: DateTime
  updatedAt: DateTime
  authorUser: UserRelateToOneForCreateInput
  permissionGroups: PermissionGroupRelateToManyForCreateInput
  commisions: CommisionRelateToOneForCreateInput
}

input CommisionRelateToOneForCreateInput {
  create: CommisionCreateInput
  connect: CommisionWhereUniqueInput
}

type Commision {
  id: ID!
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: Publisher
}

input CommisionWhereUniqueInput {
  id: ID
}

input CommisionWhereInput {
  AND: [CommisionWhereInput!]
  OR: [CommisionWhereInput!]
  NOT: [CommisionWhereInput!]
  id: IDFilter
  fixCost: IntFilter
  percentageCost: IntFilter
  custom_func_cost: StringFilter
  publisher: PublisherWhereInput
}

input CommisionOrderByInput {
  id: OrderDirection
  fixCost: OrderDirection
  percentageCost: OrderDirection
  custom_func_cost: OrderDirection
}

input CommisionUpdateInput {
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: PublisherRelateToOneForUpdateInput
}

input CommisionUpdateArgs {
  where: CommisionWhereUniqueInput!
  data: CommisionUpdateInput!
}

input CommisionCreateInput {
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: PublisherRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPermissionGroup(data: PermissionGroupCreateInput!): PermissionGroup
  createPermissionGroups(
    data: [PermissionGroupCreateInput!]!
  ): [PermissionGroup]
  updatePermissionGroup(
    where: PermissionGroupWhereUniqueInput!
    data: PermissionGroupUpdateInput!
  ): PermissionGroup
  updatePermissionGroups(data: [PermissionGroupUpdateArgs!]!): [PermissionGroup]
  deletePermissionGroup(
    where: PermissionGroupWhereUniqueInput!
  ): PermissionGroup
  deletePermissionGroups(
    where: [PermissionGroupWhereUniqueInput!]!
  ): [PermissionGroup]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(
    where: PermissionWhereUniqueInput!
    data: PermissionUpdateInput!
  ): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(
    where: PublisherWhereUniqueInput!
    data: PublisherUpdateInput!
  ): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createCommision(data: CommisionCreateInput!): Commision
  createCommisions(data: [CommisionCreateInput!]!): [Commision]
  updateCommision(
    where: CommisionWhereUniqueInput!
    data: CommisionUpdateInput!
  ): Commision
  updateCommisions(data: [CommisionUpdateArgs!]!): [Commision]
  deleteCommision(where: CommisionWhereUniqueInput!): Commision
  deleteCommisions(where: [CommisionWhereUniqueInput!]!): [Commision]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  permissionGroups(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroup(where: PermissionGroupWhereUniqueInput!): PermissionGroup
  permissionGroupsCount(where: PermissionGroupWhereInput! = {}): Int
  permissions(
    where: PermissionWhereInput! = {}
    orderBy: [PermissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Permission!]
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionsCount(where: PermissionWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  commisions(
    where: CommisionWhereInput! = {}
    orderBy: [CommisionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Commision!]
  commision(where: CommisionWhereUniqueInput!): Commision
  commisionsCount(where: CommisionWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
