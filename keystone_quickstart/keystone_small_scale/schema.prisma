// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                              String            @id @default(cuid())
  name                            String            @default("")
  email                           String            @unique @default("")
  password                        String
  phone                           String?
  identification                  String?
  isEmailValidated                Boolean           @default(false)
  active                          Boolean           @default(false)
  lastLogin                       DateTime?
  createdAt                       DateTime?
  updatedAt                       DateTime?
  permissionGroup                 PermissionGroup[] @relation("UserToPermissionGroup")
  publishers                      Publisher[]       @relation("PublisherToUser")
  from_PermissionGroup_authorUser PermissionGroup[] @relation("PermissionGroup_authorUser")
  from_PermissionGroup_user       PermissionGroup[] @relation("PermissionGroupToUser")
  from_Publisher_authorUser       Publisher[]       @relation("Publisher_authorUser")
}

model PermissionGroup {
  id                              String       @id @default(cuid())
  name                            String       @default("")
  slug                            String       @default("")
  createdAt                       DateTime
  updatedAt                       DateTime
  authorUser                      User?        @relation("PermissionGroup_authorUser", fields: [authorUserId], references: [id])
  authorUserId                    String?      @map("authorUser")
  publisher                       Publisher?   @relation("PermissionGroup_publisher", fields: [publisherId], references: [id])
  publisherId                     String?      @map("publisher")
  user                            User[]       @relation("PermissionGroupToUser")
  permission                      Permission[] @relation("PermissionGroupToPermissionGroup")
  from_User_permissionGroup       User[]       @relation("UserToPermissionGroup")
  from_Permission_permissionGroup Permission[] @relation("PermissionToPermissionGroup")
  from_Publisher_permissionGroups Publisher[]  @relation("PermissionGroupToPublisher")

  @@index([authorUserId])
  @@index([publisherId])
}

model Permission {
  id                              String            @id @default(cuid())
  name                            String            @default("")
  permissionGroup                 PermissionGroup[] @relation("PermissionToPermissionGroup")
  from_PermissionGroup_permission PermissionGroup[] @relation("PermissionGroupToPermissionGroup")
}

model Publisher {
  id                             String            @id @default(cuid())
  name                           String            @default("")
  slug                           String            @default("")
  logo                           Json?
  phone                          Int
  country                        String            @default("")
  description                    String            @default("")
  socialMedias                   String            @default("")
  createdAt                      DateTime
  updatedAt                      DateTime
  authorUser                     User?             @relation("Publisher_authorUser", fields: [authorUserId], references: [id])
  authorUserId                   String?           @map("authorUser")
  permissionGroups               PermissionGroup[] @relation("PermissionGroupToPublisher")
  commisions                     Commision?        @relation("Publisher_commisions", fields: [commisionsId], references: [id])
  commisionsId                   String?           @map("commisions")
  from_User_publishers           User[]            @relation("PublisherToUser")
  from_PermissionGroup_publisher PermissionGroup[] @relation("PermissionGroup_publisher")
  from_Commision_publisher       Commision[]       @relation("Commision_publisher")

  @@index([authorUserId])
  @@index([commisionsId])
}

model Commision {
  id                        String      @id @default(cuid())
  fixCost                   Int
  percentageCost            Int
  custom_func_cost          String      @default("")
  publisher                 Publisher?  @relation("Commision_publisher", fields: [publisherId], references: [id])
  publisherId               String?     @map("publisher")
  from_Publisher_commisions Publisher[] @relation("Publisher_commisions")

  @@index([publisherId])
}