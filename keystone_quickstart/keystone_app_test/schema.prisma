// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                              String            @id @default(cuid())
  name                            String            @default("")
  email                           String            @unique @default("")
  password                        String
  phone                           String?
  identification                  String            @default("")
  isEmailValidated                Boolean           @default(false)
  active                          Boolean           @default(false)
  lastLogin                       DateTime?
  createdAt                       DateTime?         @default(now())
  updatedAt                       DateTime?         @default(now())
  permissionGroupsAuthored        PermissionGroup[] @relation("PermissionGroupsAuthoredToUser")
  productTypes                    ProductType[]     @relation("ProductTypeToUser")
  attributes                      Attribute[]       @relation("AttributeToUser")
  permissionGroups                PermissionGroup[] @relation("UserToPermissionGroup")
  publishers                      Publisher[]       @relation("PublisherToUser")
  collections                     Collection[]      @relation("CollectionToUser")
  products                        Product[]         @relation("ProductToUser")
  productsVariants                ProductVariant[]  @relation("ProductVariantToUser")
  pricings                        Pricing[]         @relation("PricingToUser")
  discounts                       Discount[]        @relation("DiscountToUser")
  channels                        Channel[]         @relation("ChannelToUser")
  warehouses                      Warehouse[]       @relation("UserToWarehouse")
  from_PermissionGroup_authorUser PermissionGroup[] @relation("PermissionGroup_authorUser")
  from_PermissionGroup_user       PermissionGroup[] @relation("PermissionGroupsToUser")
  from_Product_authorUser         Product[]         @relation("Product_authorUser")
  from_ProductVariant_authorUser  ProductVariant[]  @relation("ProductVariant_authorUser")
  from_Pricing_authorUser         Pricing[]         @relation("Pricing_authorUser")
  from_Discount_authorUser        Discount[]        @relation("Discount_authorUser")
  from_ProductType_authorUser     ProductType[]     @relation("ProductType_authorUser")
  from_Attribute_authorUser       Attribute[]       @relation("Attribute_authorUser")
  from_Collection_authorUser      Collection[]      @relation("Collection_authorUser")
  from_Publisher_authorUser       Publisher[]       @relation("Publisher_authorUser")
  from_Channel_authorUser         Channel[]         @relation("Channel_authorUser")
  from_Warehouse_authorUser       Warehouse[]       @relation("Warehouse_authorUser")
}

model PermissionGroup {
  id                                 String       @id @default(cuid())
  name                               String       @default("")
  slug                               String       @default("")
  createdAt                          DateTime     @default(now())
  updatedAt                          DateTime     @default(now())
  authorUser                         User?        @relation("PermissionGroup_authorUser", fields: [authorUserId], references: [id])
  authorUserId                       String?      @map("authorUser")
  publisher                          Publisher?   @relation("PermissionGroup_publisher", fields: [publisherId], references: [id])
  publisherId                        String?      @map("publisher")
  user                               User[]       @relation("PermissionGroupsToUser")
  permission                         Permission[] @relation("PermissionGroupToPermission")
  from_User_permissionGroupsAuthored User[]       @relation("PermissionGroupsAuthoredToUser")
  from_User_permissionGroups         User[]       @relation("UserToPermissionGroup")
  from_Permission_permissionGroup    Permission[] @relation("PermissionToPermissionGroup")
  from_Publisher_permissionGroups    Publisher[]  @relation("PublisherToPermissionGroup")

  @@index([authorUserId])
  @@index([publisherId])
}

model Permission {
  id                              String            @id @default(cuid())
  name                            String            @default("")
  permissionGroup                 PermissionGroup[] @relation("PermissionToPermissionGroup")
  from_PermissionGroup_permission PermissionGroup[] @relation("PermissionGroupToPermission")
}

model Product {
  id                          String           @id @default(cuid())
  name                        String           @default("")
  slug                        String           @default("")
  defaultAttributesValues     String           @default("")
  isPublished                 Boolean          @default(false)
  brand                       String           @default("")
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @default(now())
  publisher                   Publisher?       @relation("Product_publisher", fields: [publisherId], references: [id])
  publisherId                 String?          @map("publisher")
  authorUser                  User?            @relation("Product_authorUser", fields: [authorUserId], references: [id])
  authorUserId                String?          @map("authorUser")
  productVariant              ProductVariant[] @relation("ProductToProductVariant")
  productType                 ProductType?     @relation("Product_productType", fields: [productTypeId], references: [id])
  productTypeId               String?          @map("productType")
  tag                         Tag[]            @relation("ProductToTag")
  category                    Category[]       @relation("ProductToCategory")
  collection                  Collection[]     @relation("ProductToCollection")
  from_User_products          User[]           @relation("ProductToUser")
  from_ProductVariant_product ProductVariant[] @relation("ProductVariant_product")
  from_ProductType_product    ProductType[]    @relation("ProductType_product")
  from_Tag_product            Tag[]            @relation("TagToProduct")
  from_Category_product       Category[]       @relation("CategoryToProduct")
  from_Collection_product     Collection[]     @relation("CollectionToProduct")
  from_Publisher_products     Publisher[]      @relation("PublisherToProduct")

  @@index([publisherId])
  @@index([authorUserId])
  @@index([productTypeId])
}

model ProductVariant {
  id                                 String           @id @default(cuid())
  sku                                String           @default("")
  extensionName                      String           @default("")
  slug                               String           @default("")
  barcode                            Int?
  imagesUrl                          String           @default("")
  mediaUrl                           String           @default("")
  attributesVariantsValues           String           @default("")
  description                        String           @default("")
  weight                             Int
  revenue                            Int
  createdAt                          DateTime         @default(now())
  updatedAt                          DateTime         @default(now())
  product                            Product?         @relation("ProductVariant_product", fields: [productId], references: [id])
  productId                          String?          @map("product")
  pricing                            Pricing?         @relation("ProductVariant_pricing", fields: [pricingId], references: [id])
  pricingId                          String?          @map("pricing")
  productPayment                     ProductPayment[] @relation("ProductVariantToProductPayment")
  authorUser                         User?            @relation("ProductVariant_authorUser", fields: [authorUserId], references: [id])
  authorUserId                       String?          @map("authorUser")
  channel                            Channel[]        @relation("ProductVariantToChannel")
  fullfilment                        Fullfilment[]    @relation("ProductVariantToFullfilment")
  productStock                       ProductStock?    @relation("ProductVariant_productStock", fields: [productStockId], references: [id])
  productStockId                     String?          @map("productStock")
  from_User_productsVariants         User[]           @relation("ProductVariantToUser")
  from_Product_productVariant        Product[]        @relation("ProductToProductVariant")
  from_Pricing_productVariant        Pricing[]        @relation("PricingToProductVariant")
  from_ProductPayment_productVariant ProductPayment[] @relation("ProductPaymentToProductVariant")
  from_Channel_ProductVariant        Channel[]        @relation("ChannelToProductVariant")
  from_Fullfilment_productVariant    Fullfilment[]    @relation("FullfilmentToProductVariant")
  from_ProductStock_productVariant   ProductStock[]   @relation("ProductStockToProductVariant")

  @@index([productId])
  @@index([pricingId])
  @@index([authorUserId])
  @@index([productStockId])
}

model Pricing {
  id                          String           @id @default(cuid())
  currency                    String           @default("")
  listPrice                   String           @default("")
  costPrice                   String           @default("")
  status                      String           @default("")
  startsAt                    DateTime         @default(now())
  endsAt                      DateTime         @default(now())
  authorUser                  User?            @relation("Pricing_authorUser", fields: [authorUserId], references: [id])
  authorUserId                String?          @map("authorUser")
  productVariant              ProductVariant[] @relation("PricingToProductVariant")
  discount                    Discount[]       @relation("PricingToDiscount")
  channel                     Channel[]        @relation("PricingToChannel")
  from_User_pricings          User[]           @relation("PricingToUser")
  from_ProductVariant_pricing ProductVariant[] @relation("ProductVariant_pricing")
  from_Discount_pricing       Discount[]       @relation("DiscountToPricing")
  from_Channel_Pricing        Channel[]        @relation("ChannelToPricing")

  @@index([authorUserId])
}

model Discount {
  id                         String         @id @default(cuid())
  code                       Int
  isDisabled                 Boolean        @default(false)
  usageLimit                 Int
  status                     Boolean        @default(false)
  priority                   Int
  startsAt                   DateTime       @default(now())
  endsAt                     DateTime       @default(now())
  authorUser                 User?          @relation("Discount_authorUser", fields: [authorUserId], references: [id])
  authorUserId               String?        @map("authorUser")
  publisher                  Publisher?     @relation("Discount_publisher", fields: [publisherId], references: [id])
  publisherId                String?        @map("publisher")
  pricing                    Pricing[]      @relation("DiscountToPricing")
  channel                    Channel[]      @relation("DiscountToChannel")
  discountRule               DiscountRule[] @relation("DiscountToDiscountRule")
  from_User_discounts        User[]         @relation("DiscountToUser")
  from_Pricing_discount      Pricing[]      @relation("PricingToDiscount")
  from_DiscountRule_discount DiscountRule[] @relation("DiscountRule_discount")
  from_Publisher_discount    Publisher[]    @relation("PublisherToDiscount")
  from_Channel_Discounts     Channel[]      @relation("ChannelToDiscount")

  @@index([authorUserId])
  @@index([publisherId])
}

model DiscountRule {
  id                         String     @id @default(cuid())
  type                       String     @default("")
  value                      String     @default("")
  allocation                 String     @default("")
  description                String     @default("")
  conditions                 String     @default("")
  discount                   Discount?  @relation("DiscountRule_discount", fields: [discountId], references: [id])
  discountId                 String?    @map("discount")
  from_Discount_discountRule Discount[] @relation("DiscountToDiscountRule")

  @@index([discountId])
}

model ProductType {
  id                           String      @id @default(cuid())
  name                         String      @default("")
  slug                         String      @default("")
  isShippingRequired           Boolean     @default(false)
  createdAt                    DateTime    @default(now())
  updatedAt                    DateTime    @default(now())
  authorUser                   User?       @relation("ProductType_authorUser", fields: [authorUserId], references: [id])
  authorUserId                 String?     @map("authorUser")
  product                      Product?    @relation("ProductType_product", fields: [productId], references: [id])
  productId                    String?     @map("product")
  publisher                    Publisher?  @relation("ProductType_publisher", fields: [publisherId], references: [id])
  publisherId                  String?     @map("publisher")
  attribute                    Attribute[] @relation("ProductTypeToAttribute")
  from_User_productTypes       User[]      @relation("ProductTypeToUser")
  from_Product_productType     Product[]   @relation("Product_productType")
  from_Attribute_productType   Attribute[] @relation("AttributeToProductType")
  from_Publisher_productsTypes Publisher[] @relation("PublisherToProductType")

  @@index([authorUserId])
  @@index([productId])
  @@index([publisherId])
}

model Attribute {
  id                         String        @id @default(cuid())
  name                       String        @default("")
  slug                       String        @default("")
  choices                    String        @default("")
  isRequired                 Boolean       @default(false)
  isVisible                  Boolean       @default(false)
  isFilterable               Boolean       @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @default(now())
  authorUser                 User?         @relation("Attribute_authorUser", fields: [authorUserId], references: [id])
  authorUserId               String?       @map("authorUser")
  publisher                  Publisher?    @relation("Attribute_publisher", fields: [publisherId], references: [id])
  publisherId                String?       @map("publisher")
  productType                ProductType[] @relation("AttributeToProductType")
  from_User_attributes       User[]        @relation("AttributeToUser")
  from_ProductType_attribute ProductType[] @relation("ProductTypeToAttribute")
  from_Publisher_attributes  Publisher[]   @relation("PublisherToAttribute")

  @@index([authorUserId])
  @@index([publisherId])
}

model ProductPayment {
  id                                 String           @id @default(cuid())
  paymentMethod                      String           @default("")
  transaction                        String           @default("")
  order                              Order?           @relation("ProductPayment_order", fields: [orderId], references: [id])
  orderId                            String?          @map("order")
  productVariant                     ProductVariant[] @relation("ProductPaymentToProductVariant")
  from_ProductVariant_productPayment ProductVariant[] @relation("ProductVariantToProductPayment")
  from_Order_productPayment          Order[]          @relation("ProductPaymentToOrder")

  @@index([orderId])
}

model Tag {
  id               String    @id @default(cuid())
  value            String    @default("")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  product          Product[] @relation("TagToProduct")
  from_Product_tag Product[] @relation("ProductToTag")
}

model Category {
  id                               String     @id @default(cuid())
  name                             String     @default("")
  createdAt                        DateTime   @default(now())
  updatedAt                        DateTime   @default(now())
  parentCategory                   Category?  @relation("Category_parentCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId                 String?    @map("parentCategory")
  childrenCategories               Category[] @relation("ParentCategory")
  product                          Product[]  @relation("CategoryToProduct")
  from_Product_category            Product[]  @relation("ProductToCategory")
  from_Category_parentCategory     Category[] @relation("Category_parentCategory")
  from_Category_childrenCategories Category[] @relation("ParentCategory")

  @@index([parentCategoryId])
}

model Collection {
  id                        String      @id @default(cuid())
  name                      String      @default("")
  slug                      String      @default("")
  isVisible                 Boolean     @default(false)
  description               String      @default("")
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @default(now())
  authorUser                User?       @relation("Collection_authorUser", fields: [authorUserId], references: [id])
  authorUserId              String?     @map("authorUser")
  publisher                 Publisher?  @relation("Collection_publisher", fields: [publisherId], references: [id])
  publisherId               String?     @map("publisher")
  product                   Product[]   @relation("CollectionToProduct")
  from_User_collections     User[]      @relation("CollectionToUser")
  from_Product_collection   Product[]   @relation("ProductToCollection")
  from_Publisher_collection Publisher[] @relation("PublisherToCollection")

  @@index([authorUserId])
  @@index([publisherId])
}

model Publisher {
  id                             String            @id @default(cuid())
  name                           String            @default("")
  slug                           String            @default("")
  logo                           String            @default("")
  phone                          Int?
  country                        String            @default("")
  description                    String?
  socialMedias                   String?
  createdAt                      DateTime          @default(now())
  updatedAt                      DateTime          @default(now())
  authorUser                     User?             @relation("Publisher_authorUser", fields: [authorUserId], references: [id])
  authorUserId                   String?           @map("authorUser")
  attributes                     Attribute[]       @relation("PublisherToAttribute")
  productsTypes                  ProductType[]     @relation("PublisherToProductType")
  products                       Product[]         @relation("PublisherToProduct")
  permissionGroups               PermissionGroup[] @relation("PublisherToPermissionGroup")
  commisions                     Commision[]       @relation("PublisherToCommision")
  warehouses                     Warehouse[]       @relation("WarehouseToPublisher")
  discount                       Discount[]        @relation("PublisherToDiscount")
  channels                       Channel[]         @relation("PublisherToChannel")
  collection                     Collection[]      @relation("PublisherToCollection")
  from_User_publishers           User[]            @relation("PublisherToUser")
  from_PermissionGroup_publisher PermissionGroup[] @relation("PermissionGroup_publisher")
  from_Product_publisher         Product[]         @relation("Product_publisher")
  from_Discount_publisher        Discount[]        @relation("Discount_publisher")
  from_ProductType_publisher     ProductType[]     @relation("ProductType_publisher")
  from_Attribute_publisher       Attribute[]       @relation("Attribute_publisher")
  from_Collection_publisher      Collection[]      @relation("Collection_publisher")
  from_Commision_publisher       Commision[]       @relation("Commision_publisher")
  from_Channel_publisher         Channel[]         @relation("Channel_publisher")
  from_Warehouse_publisher       Warehouse[]       @relation("Warehouse_publisher")

  @@index([authorUserId])
}

model Commision {
  id                        String      @id @default(cuid())
  fixCost                   Int
  percentageCost            Int
  custom_func_cost          String      @default("")
  publisher                 Publisher?  @relation("Commision_publisher", fields: [publisherId], references: [id])
  publisherId               String?     @map("publisher")
  from_Publisher_commisions Publisher[] @relation("PublisherToCommision")

  @@index([publisherId])
}

model Channel {
  id                                String                 @id @default(cuid())
  name                              String                 @default("")
  slug                              String                 @default("")
  isActive                          Boolean                @default(false)
  currencyCode                      String                 @default("")
  createdAt                         DateTime               @default(now())
  updatedAt                         DateTime               @default(now())
  authorUser                        User?                  @relation("Channel_authorUser", fields: [authorUserId], references: [id])
  authorUserId                      String?                @map("authorUser")
  publisher                         Publisher?             @relation("Channel_publisher", fields: [publisherId], references: [id])
  publisherId                       String?                @map("publisher")
  channelPaymentMethod              ChannelPaymentMethod[] @relation("ChannelToChannelPaymentMethod")
  ProductVariant                    ProductVariant[]       @relation("ChannelToProductVariant")
  Pricing                           Pricing[]              @relation("ChannelToPricing")
  ShippingMethods                   ShippingMethod[]       @relation("ChannelToShippingMethod")
  Discounts                         Discount[]             @relation("ChannelToDiscount")
  Warehouse                         Warehouse[]            @relation("ChannelToWarehouse")
  from_User_channels                User[]                 @relation("ChannelToUser")
  from_ProductVariant_channel       ProductVariant[]       @relation("ProductVariantToChannel")
  from_Pricing_channel              Pricing[]              @relation("PricingToChannel")
  from_Discount_channel             Discount[]             @relation("DiscountToChannel")
  from_Publisher_channels           Publisher[]            @relation("PublisherToChannel")
  from_Warehouse_channel            Warehouse[]            @relation("WarehouseToChannel")
  from_ChannelPaymentMethod_channel ChannelPaymentMethod[] @relation("ChannelPaymentMethodToChannel")
  from_ShippingMethod_channel       ShippingMethod[]       @relation("ShippingMethodToChannel")

  @@index([authorUserId])
  @@index([publisherId])
}

model Warehouse {
  id                          String         @id @default(cuid())
  name                        String         @default("")
  slug                        String         @default("")
  shippingZones               Json?
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @default(now())
  authorUser                  User?          @relation("Warehouse_authorUser", fields: [authorUserId], references: [id])
  authorUserId                String?        @map("authorUser")
  publisher                   Publisher?     @relation("Warehouse_publisher", fields: [publisherId], references: [id])
  publisherId                 String?        @map("publisher")
  productStock                ProductStock[] @relation("WarehouseToProductStock")
  channel                     Channel[]      @relation("WarehouseToChannel")
  Address                     Address?       @relation("Warehouse_Address", fields: [AddressId], references: [id])
  AddressId                   String?        @map("Address")
  from_User_warehouses        User[]         @relation("UserToWarehouse")
  from_Publisher_warehouses   Publisher[]    @relation("WarehouseToPublisher")
  from_Channel_Warehouse      Channel[]      @relation("ChannelToWarehouse")
  from_Address_warehouse      Address[]      @relation("Address_warehouse")
  from_ProductStock_warehouse ProductStock[] @relation("ProductStock_warehouse")

  @@index([authorUserId])
  @@index([publisherId])
  @@index([AddressId])
}

model Order {
  id                         String            @id @default(cuid())
  status                     String            @default("")
  subtotal                   String            @default("")
  total                      String            @default("")
  balancedTotal              String            @default("")
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @default(now())
  productPayment             ProductPayment[]  @relation("ProductPaymentToOrder")
  ShippingCarrier            ShippingCarrier?  @relation("Order_ShippingCarrier", fields: [ShippingCarrierId], references: [id])
  ShippingCarrierId          String?           @map("ShippingCarrier")
  from_ProductPayment_order  ProductPayment[]  @relation("ProductPayment_order")
  from_ShippingCarrier_order ShippingCarrier[] @relation("ShippingCarrier_order")

  @@index([ShippingCarrierId])
}

model ShippingCarrier {
  id                               String        @id @default(cuid())
  name                             String        @default("")
  currency                         String        @default("")
  amount                           String        @default("")
  order                            Order?        @relation("ShippingCarrier_order", fields: [orderId], references: [id])
  orderId                          String?       @map("order")
  Fullfilment                      Fullfilment[] @relation("ShippingCarrierToFullfilment")
  from_Order_ShippingCarrier       Order[]       @relation("Order_ShippingCarrier")
  from_Fullfilment_shippingCarrier Fullfilment[] @relation("Fullfilment_shippingCarrier")

  @@index([orderId])
}

model Fullfilment {
  id                               String            @id @default(cuid())
  email                            String            @default("")
  shippedAt                        String            @default("")
  status                           Boolean           @default(false)
  shippingCarrier                  ShippingCarrier?  @relation("Fullfilment_shippingCarrier", fields: [shippingCarrierId], references: [id])
  shippingCarrierId                String?           @map("shippingCarrier")
  productVariant                   ProductVariant[]  @relation("FullfilmentToProductVariant")
  Tracking                         Tracking?         @relation("Fullfilment_Tracking", fields: [TrackingId], references: [id])
  TrackingId                       String?           @map("Tracking")
  from_ProductVariant_fullfilment  ProductVariant[]  @relation("ProductVariantToFullfilment")
  from_ShippingCarrier_Fullfilment ShippingCarrier[] @relation("ShippingCarrierToFullfilment")
  from_Tracking_fullfilment        Tracking[]        @relation("Tracking_fullfilment")

  @@index([shippingCarrierId])
  @@index([TrackingId])
}

model Tracking {
  id                        String        @id @default(cuid())
  trackingNumber            Int
  url                       String        @default("")
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @default(now())
  fullfilment               Fullfilment?  @relation("Tracking_fullfilment", fields: [fullfilmentId], references: [id])
  fullfilmentId             String?       @map("fullfilment")
  from_Fullfilment_Tracking Fullfilment[] @relation("Fullfilment_Tracking")

  @@index([fullfilmentId])
}

model ChannelPaymentMethod {
  id                                String    @id @default(cuid())
  name                              String    @default("")
  isAvailable                       Boolean   @default(false)
  channel                           Channel[] @relation("ChannelPaymentMethodToChannel")
  from_Channel_channelPaymentMethod Channel[] @relation("ChannelToChannelPaymentMethod")
}

model Address {
  id                     String      @id @default(cuid())
  country                String      @default("")
  countryArea            String      @default("")
  city                   String      @default("")
  zipCode                String      @default("")
  streetAdress           String      @default("")
  extraDetails           String?
  warehouse              Warehouse?  @relation("Address_warehouse", fields: [warehouseId], references: [id])
  warehouseId            String?     @map("warehouse")
  from_Warehouse_Address Warehouse[] @relation("Warehouse_Address")

  @@index([warehouseId])
}

model ShippingMethod {
  id                           String    @id @default(cuid())
  name                         String    @default("")
  currency                     String    @default("")
  amount                       Float
  requeriments                 Json?
  channel                      Channel[] @relation("ShippingMethodToChannel")
  from_Channel_ShippingMethods Channel[] @relation("ChannelToShippingMethod")
}

model ProductStock {
  id                               String           @id @default(cuid())
  sku                              String           @default("")
  stock                            Int
  warehouse                        Warehouse?       @relation("ProductStock_warehouse", fields: [warehouseId], references: [id])
  warehouseId                      String?          @map("warehouse")
  productVariant                   ProductVariant[] @relation("ProductStockToProductVariant")
  from_ProductVariant_productStock ProductVariant[] @relation("ProductVariant_productStock")
  from_Warehouse_productStock      Warehouse[]      @relation("WarehouseToProductStock")

  @@index([warehouseId])
}