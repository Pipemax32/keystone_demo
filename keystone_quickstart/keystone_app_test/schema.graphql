# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  phone: String
  identification: String
  permissionGroups(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroupsCount(where: PermissionGroupWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  identification: StringFilter
  permissionGroups: PermissionGroupManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PermissionGroupManyRelationFilter {
  every: PermissionGroupWhereInput
  some: PermissionGroupWhereInput
  none: PermissionGroupWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  identification: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phone: String
  identification: String
  permissionGroups: PermissionGroupRelateToManyForUpdateInput
}

input PermissionGroupRelateToManyForUpdateInput {
  disconnect: [PermissionGroupWhereUniqueInput!]
  set: [PermissionGroupWhereUniqueInput!]
  create: [PermissionGroupCreateInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  phone: String
  identification: String
  permissionGroups: PermissionGroupRelateToManyForCreateInput
}

input PermissionGroupRelateToManyForCreateInput {
  create: [PermissionGroupCreateInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

type PermissionGroup {
  id: ID!
  name: String
  slug: String
  publisher: Publisher
  permission(
    where: PermissionWhereInput! = {}
    orderBy: [PermissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Permission!]
  permissionCount(where: PermissionWhereInput! = {}): Int
}

input PermissionGroupWhereUniqueInput {
  id: ID
}

input PermissionGroupWhereInput {
  AND: [PermissionGroupWhereInput!]
  OR: [PermissionGroupWhereInput!]
  NOT: [PermissionGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  publisher: PublisherWhereInput
  permission: PermissionManyRelationFilter
}

input PermissionManyRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input PermissionGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input PermissionGroupUpdateInput {
  name: String
  slug: String
  publisher: PublisherRelateToOneForUpdateInput
  permission: PermissionRelateToManyForUpdateInput
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input PermissionRelateToManyForUpdateInput {
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionGroupUpdateArgs {
  where: PermissionGroupWhereUniqueInput!
  data: PermissionGroupUpdateInput!
}

input PermissionGroupCreateInput {
  name: String
  slug: String
  publisher: PublisherRelateToOneForCreateInput
  permission: PermissionRelateToManyForCreateInput
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

input PermissionRelateToManyForCreateInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

type Permission {
  id: ID!
  name: String
}

input PermissionWhereUniqueInput {
  id: ID
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PermissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PermissionUpdateInput {
  name: String
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  name: String
}

type Product {
  id: ID!
  name: String
  slug: String
  defaultAttributesValues: String
  isPublished: Boolean
  brand: String
  publisher: Publisher
  productVariant(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariantCount(where: ProductVariantWhereInput! = {}): Int
  productType(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productTypeCount(where: ProductTypeWhereInput! = {}): Int
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  collection(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collectionCount(where: CollectionWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  defaultAttributesValues: StringFilter
  isPublished: BooleanFilter
  brand: StringFilter
  publisher: PublisherWhereInput
  productVariant: ProductVariantManyRelationFilter
  productType: ProductTypeManyRelationFilter
  tag: TagManyRelationFilter
  category: CategoryManyRelationFilter
  collection: CollectionManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input ProductTypeManyRelationFilter {
  every: ProductTypeWhereInput
  some: ProductTypeWhereInput
  none: ProductTypeWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input CollectionManyRelationFilter {
  every: CollectionWhereInput
  some: CollectionWhereInput
  none: CollectionWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  defaultAttributesValues: OrderDirection
  isPublished: OrderDirection
  brand: OrderDirection
}

input ProductUpdateInput {
  name: String
  slug: String
  defaultAttributesValues: String
  isPublished: Boolean
  brand: String
  publisher: PublisherRelateToOneForUpdateInput
  productVariant: ProductVariantRelateToManyForUpdateInput
  productType: ProductTypeRelateToManyForUpdateInput
  tag: TagRelateToManyForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  collection: CollectionRelateToManyForUpdateInput
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductTypeRelateToManyForUpdateInput {
  disconnect: [ProductTypeWhereUniqueInput!]
  set: [ProductTypeWhereUniqueInput!]
  create: [ProductTypeCreateInput!]
  connect: [ProductTypeWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CollectionRelateToManyForUpdateInput {
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  slug: String
  defaultAttributesValues: String
  isPublished: Boolean
  brand: String
  publisher: PublisherRelateToOneForCreateInput
  productVariant: ProductVariantRelateToManyForCreateInput
  productType: ProductTypeRelateToManyForCreateInput
  tag: TagRelateToManyForCreateInput
  category: CategoryRelateToManyForCreateInput
  collection: CollectionRelateToManyForCreateInput
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductTypeRelateToManyForCreateInput {
  create: [ProductTypeCreateInput!]
  connect: [ProductTypeWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CollectionRelateToManyForCreateInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

type ProductVariant {
  id: ID!
  sku: String
  extensionName: String
  slug: String
  barcode: Int
  imagesUrl: String
  mediaUrl: String
  attributesVariantsValues: String
  description: String
  weight: Int
  product: Product
  pricing: Pricing
  channel(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channelCount(where: ChannelWhereInput! = {}): Int
  productStock: ProductStock
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  sku: StringFilter
  extensionName: StringFilter
  slug: StringFilter
  barcode: IntNullableFilter
  imagesUrl: StringFilter
  mediaUrl: StringFilter
  attributesVariantsValues: StringFilter
  description: StringFilter
  weight: IntFilter
  product: ProductWhereInput
  pricing: PricingWhereInput
  channel: ChannelManyRelationFilter
  productStock: ProductStockWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ChannelManyRelationFilter {
  every: ChannelWhereInput
  some: ChannelWhereInput
  none: ChannelWhereInput
}

input ProductVariantOrderByInput {
  id: OrderDirection
  sku: OrderDirection
  extensionName: OrderDirection
  slug: OrderDirection
  barcode: OrderDirection
  imagesUrl: OrderDirection
  mediaUrl: OrderDirection
  attributesVariantsValues: OrderDirection
  description: OrderDirection
  weight: OrderDirection
}

input ProductVariantUpdateInput {
  sku: String
  extensionName: String
  slug: String
  barcode: Int
  imagesUrl: String
  mediaUrl: String
  attributesVariantsValues: String
  description: String
  weight: Int
  product: ProductRelateToOneForUpdateInput
  pricing: PricingRelateToOneForUpdateInput
  channel: ChannelRelateToManyForUpdateInput
  productStock: ProductStockRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input PricingRelateToOneForUpdateInput {
  create: PricingCreateInput
  connect: PricingWhereUniqueInput
  disconnect: Boolean
}

input ChannelRelateToManyForUpdateInput {
  disconnect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ProductStockRelateToOneForUpdateInput {
  create: ProductStockCreateInput
  connect: ProductStockWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  sku: String
  extensionName: String
  slug: String
  barcode: Int
  imagesUrl: String
  mediaUrl: String
  attributesVariantsValues: String
  description: String
  weight: Int
  product: ProductRelateToOneForCreateInput
  pricing: PricingRelateToOneForCreateInput
  channel: ChannelRelateToManyForCreateInput
  productStock: ProductStockRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input PricingRelateToOneForCreateInput {
  create: PricingCreateInput
  connect: PricingWhereUniqueInput
}

input ChannelRelateToManyForCreateInput {
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ProductStockRelateToOneForCreateInput {
  create: ProductStockCreateInput
  connect: ProductStockWhereUniqueInput
}

type Pricing {
  id: ID!
  currency: String
  listPrice: String
  costPrice: String
  status: String
  discount(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discountCount(where: DiscountWhereInput! = {}): Int
  channel(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channelCount(where: ChannelWhereInput! = {}): Int
}

input PricingWhereUniqueInput {
  id: ID
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  NOT: [PricingWhereInput!]
  id: IDFilter
  currency: StringFilter
  listPrice: StringFilter
  costPrice: StringFilter
  status: StringFilter
  discount: DiscountManyRelationFilter
  channel: ChannelManyRelationFilter
}

input DiscountManyRelationFilter {
  every: DiscountWhereInput
  some: DiscountWhereInput
  none: DiscountWhereInput
}

input PricingOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  listPrice: OrderDirection
  costPrice: OrderDirection
  status: OrderDirection
}

input PricingUpdateInput {
  currency: String
  listPrice: String
  costPrice: String
  status: String
  discount: DiscountRelateToManyForUpdateInput
  channel: ChannelRelateToManyForUpdateInput
}

input DiscountRelateToManyForUpdateInput {
  disconnect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  create: [DiscountCreateInput!]
  connect: [DiscountWhereUniqueInput!]
}

input PricingUpdateArgs {
  where: PricingWhereUniqueInput!
  data: PricingUpdateInput!
}

input PricingCreateInput {
  currency: String
  listPrice: String
  costPrice: String
  status: String
  discount: DiscountRelateToManyForCreateInput
  channel: ChannelRelateToManyForCreateInput
}

input DiscountRelateToManyForCreateInput {
  create: [DiscountCreateInput!]
  connect: [DiscountWhereUniqueInput!]
}

type Discount {
  id: ID!
  code: Int
  isDisabled: Boolean
  usageLimit: Int
  status: Boolean
  priority: Int
  publisher: Publisher
  discountRule(
    where: DiscountRuleWhereInput! = {}
    orderBy: [DiscountRuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountRule!]
  discountRuleCount(where: DiscountRuleWhereInput! = {}): Int
}

input DiscountWhereUniqueInput {
  id: ID
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  id: IDFilter
  code: IntFilter
  isDisabled: BooleanFilter
  usageLimit: IntFilter
  status: BooleanFilter
  priority: IntFilter
  publisher: PublisherWhereInput
  discountRule: DiscountRuleManyRelationFilter
}

input DiscountRuleManyRelationFilter {
  every: DiscountRuleWhereInput
  some: DiscountRuleWhereInput
  none: DiscountRuleWhereInput
}

input DiscountOrderByInput {
  id: OrderDirection
  code: OrderDirection
  isDisabled: OrderDirection
  usageLimit: OrderDirection
  status: OrderDirection
  priority: OrderDirection
}

input DiscountUpdateInput {
  code: Int
  isDisabled: Boolean
  usageLimit: Int
  status: Boolean
  priority: Int
  publisher: PublisherRelateToOneForUpdateInput
  discountRule: DiscountRuleRelateToManyForUpdateInput
}

input DiscountRuleRelateToManyForUpdateInput {
  disconnect: [DiscountRuleWhereUniqueInput!]
  set: [DiscountRuleWhereUniqueInput!]
  create: [DiscountRuleCreateInput!]
  connect: [DiscountRuleWhereUniqueInput!]
}

input DiscountUpdateArgs {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateInput!
}

input DiscountCreateInput {
  code: Int
  isDisabled: Boolean
  usageLimit: Int
  status: Boolean
  priority: Int
  publisher: PublisherRelateToOneForCreateInput
  discountRule: DiscountRuleRelateToManyForCreateInput
}

input DiscountRuleRelateToManyForCreateInput {
  create: [DiscountRuleCreateInput!]
  connect: [DiscountRuleWhereUniqueInput!]
}

type DiscountRule {
  id: ID!
  type: String
  value: String
  allocation: String
  description: String
  conditions: String
}

input DiscountRuleWhereUniqueInput {
  id: ID
}

input DiscountRuleWhereInput {
  AND: [DiscountRuleWhereInput!]
  OR: [DiscountRuleWhereInput!]
  NOT: [DiscountRuleWhereInput!]
  id: IDFilter
  type: StringFilter
  value: StringFilter
  allocation: StringFilter
  description: StringFilter
  conditions: StringFilter
}

input DiscountRuleOrderByInput {
  id: OrderDirection
  type: OrderDirection
  value: OrderDirection
  allocation: OrderDirection
  description: OrderDirection
  conditions: OrderDirection
}

input DiscountRuleUpdateInput {
  type: String
  value: String
  allocation: String
  description: String
  conditions: String
}

input DiscountRuleUpdateArgs {
  where: DiscountRuleWhereUniqueInput!
  data: DiscountRuleUpdateInput!
}

input DiscountRuleCreateInput {
  type: String
  value: String
  allocation: String
  description: String
  conditions: String
}

type ProductType {
  id: ID!
  name: String
  slug: String
  isShippingRequired: Boolean
  publisher: Publisher
  attribute(
    where: AttributeWhereInput! = {}
    orderBy: [AttributeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attribute!]
  attributeCount(where: AttributeWhereInput! = {}): Int
}

input ProductTypeWhereUniqueInput {
  id: ID
}

input ProductTypeWhereInput {
  AND: [ProductTypeWhereInput!]
  OR: [ProductTypeWhereInput!]
  NOT: [ProductTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  isShippingRequired: BooleanFilter
  publisher: PublisherWhereInput
  attribute: AttributeManyRelationFilter
}

input AttributeManyRelationFilter {
  every: AttributeWhereInput
  some: AttributeWhereInput
  none: AttributeWhereInput
}

input ProductTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  isShippingRequired: OrderDirection
}

input ProductTypeUpdateInput {
  name: String
  slug: String
  isShippingRequired: Boolean
  publisher: PublisherRelateToOneForUpdateInput
  attribute: AttributeRelateToManyForUpdateInput
}

input AttributeRelateToManyForUpdateInput {
  disconnect: [AttributeWhereUniqueInput!]
  set: [AttributeWhereUniqueInput!]
  create: [AttributeCreateInput!]
  connect: [AttributeWhereUniqueInput!]
}

input ProductTypeUpdateArgs {
  where: ProductTypeWhereUniqueInput!
  data: ProductTypeUpdateInput!
}

input ProductTypeCreateInput {
  name: String
  slug: String
  isShippingRequired: Boolean
  publisher: PublisherRelateToOneForCreateInput
  attribute: AttributeRelateToManyForCreateInput
}

input AttributeRelateToManyForCreateInput {
  create: [AttributeCreateInput!]
  connect: [AttributeWhereUniqueInput!]
}

type Attribute {
  id: ID!
  name: String
  slug: String
  isRequired: Boolean
  isVisible: Boolean
  isFilterable: Boolean
  publisher: Publisher
}

input AttributeWhereUniqueInput {
  id: ID
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  isRequired: BooleanFilter
  isVisible: BooleanFilter
  isFilterable: BooleanFilter
  publisher: PublisherWhereInput
}

input AttributeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  isRequired: OrderDirection
  isVisible: OrderDirection
  isFilterable: OrderDirection
}

input AttributeUpdateInput {
  name: String
  slug: String
  isRequired: Boolean
  isVisible: Boolean
  isFilterable: Boolean
  publisher: PublisherRelateToOneForUpdateInput
}

input AttributeUpdateArgs {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateInput!
}

input AttributeCreateInput {
  name: String
  slug: String
  isRequired: Boolean
  isVisible: Boolean
  isFilterable: Boolean
  publisher: PublisherRelateToOneForCreateInput
}

type ProductPayment {
  id: ID!
  paymentMethod: String
  transaction: String
  order: Order
  productVariant(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariantCount(where: ProductVariantWhereInput! = {}): Int
}

input ProductPaymentWhereUniqueInput {
  id: ID
}

input ProductPaymentWhereInput {
  AND: [ProductPaymentWhereInput!]
  OR: [ProductPaymentWhereInput!]
  NOT: [ProductPaymentWhereInput!]
  id: IDFilter
  paymentMethod: StringFilter
  transaction: StringFilter
  order: OrderWhereInput
  productVariant: ProductVariantManyRelationFilter
}

input ProductPaymentOrderByInput {
  id: OrderDirection
  paymentMethod: OrderDirection
  transaction: OrderDirection
}

input ProductPaymentUpdateInput {
  paymentMethod: String
  transaction: String
  order: OrderRelateToOneForUpdateInput
  productVariant: ProductVariantRelateToManyForUpdateInput
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input ProductPaymentUpdateArgs {
  where: ProductPaymentWhereUniqueInput!
  data: ProductPaymentUpdateInput!
}

input ProductPaymentCreateInput {
  paymentMethod: String
  transaction: String
  order: OrderRelateToOneForCreateInput
  productVariant: ProductVariantRelateToManyForCreateInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Tag {
  id: ID!
  value: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  value: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input TagUpdateInput {
  value: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  value: String
}

type Category {
  id: ID!
  name: String
  parentCategory: Category
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  parentCategory: CategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  parentCategory: CategoryRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  parentCategory: CategoryRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Collection {
  id: ID!
  name: String
  slug: String
  isVisible: Boolean
  description: String
  publisher: Publisher
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  isVisible: BooleanFilter
  description: StringFilter
  publisher: PublisherWhereInput
  product: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CollectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  isVisible: OrderDirection
  description: OrderDirection
}

input CollectionUpdateInput {
  name: String
  slug: String
  isVisible: Boolean
  description: String
  publisher: PublisherRelateToOneForUpdateInput
  product: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  name: String
  slug: String
  isVisible: Boolean
  description: String
  publisher: PublisherRelateToOneForCreateInput
  product: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Publisher {
  id: ID!
  name: String
  slug: String
  logo: String
  phone: Int
  country: String
  description: String
  socialMedias: String
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  logo: StringFilter
  phone: IntNullableFilter
  country: StringFilter
  description: StringNullableFilter
  socialMedias: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PublisherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  logo: OrderDirection
  phone: OrderDirection
  country: OrderDirection
  description: OrderDirection
  socialMedias: OrderDirection
}

input PublisherUpdateInput {
  name: String
  slug: String
  logo: String
  phone: Int
  country: String
  description: String
  socialMedias: String
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  name: String
  slug: String
  logo: String
  phone: Int
  country: String
  description: String
  socialMedias: String
}

type Commision {
  id: ID!
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: Publisher
}

input CommisionWhereUniqueInput {
  id: ID
}

input CommisionWhereInput {
  AND: [CommisionWhereInput!]
  OR: [CommisionWhereInput!]
  NOT: [CommisionWhereInput!]
  id: IDFilter
  fixCost: IntFilter
  percentageCost: IntFilter
  custom_func_cost: StringFilter
  publisher: PublisherWhereInput
}

input CommisionOrderByInput {
  id: OrderDirection
  fixCost: OrderDirection
  percentageCost: OrderDirection
  custom_func_cost: OrderDirection
}

input CommisionUpdateInput {
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: PublisherRelateToOneForUpdateInput
}

input CommisionUpdateArgs {
  where: CommisionWhereUniqueInput!
  data: CommisionUpdateInput!
}

input CommisionCreateInput {
  fixCost: Int
  percentageCost: Int
  custom_func_cost: String
  publisher: PublisherRelateToOneForCreateInput
}

type Channel {
  id: ID!
  name: String
  slug: String
  isActive: Boolean
  currencyCode: String
  publisher: Publisher
  channelPaymentMethod(
    where: ChannelPaymentMethodWhereInput! = {}
    orderBy: [ChannelPaymentMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ChannelPaymentMethod!]
  channelPaymentMethodCount(where: ChannelPaymentMethodWhereInput! = {}): Int
  ShippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  ShippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  Warehouse(
    where: WarehouseWhereInput! = {}
    orderBy: [WarehouseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Warehouse!]
  WarehouseCount(where: WarehouseWhereInput! = {}): Int
}

input ChannelWhereUniqueInput {
  id: ID
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  isActive: BooleanFilter
  currencyCode: StringFilter
  publisher: PublisherWhereInput
  channelPaymentMethod: ChannelPaymentMethodManyRelationFilter
  ShippingMethods: ShippingMethodManyRelationFilter
  Warehouse: WarehouseManyRelationFilter
}

input ChannelPaymentMethodManyRelationFilter {
  every: ChannelPaymentMethodWhereInput
  some: ChannelPaymentMethodWhereInput
  none: ChannelPaymentMethodWhereInput
}

input ShippingMethodManyRelationFilter {
  every: ShippingMethodWhereInput
  some: ShippingMethodWhereInput
  none: ShippingMethodWhereInput
}

input WarehouseManyRelationFilter {
  every: WarehouseWhereInput
  some: WarehouseWhereInput
  none: WarehouseWhereInput
}

input ChannelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  isActive: OrderDirection
  currencyCode: OrderDirection
}

input ChannelUpdateInput {
  name: String
  slug: String
  isActive: Boolean
  currencyCode: String
  publisher: PublisherRelateToOneForUpdateInput
  channelPaymentMethod: ChannelPaymentMethodRelateToManyForUpdateInput
  ShippingMethods: ShippingMethodRelateToManyForUpdateInput
  Warehouse: WarehouseRelateToManyForUpdateInput
}

input ChannelPaymentMethodRelateToManyForUpdateInput {
  disconnect: [ChannelPaymentMethodWhereUniqueInput!]
  set: [ChannelPaymentMethodWhereUniqueInput!]
  create: [ChannelPaymentMethodCreateInput!]
  connect: [ChannelPaymentMethodWhereUniqueInput!]
}

input ShippingMethodRelateToManyForUpdateInput {
  disconnect: [ShippingMethodWhereUniqueInput!]
  set: [ShippingMethodWhereUniqueInput!]
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input WarehouseRelateToManyForUpdateInput {
  disconnect: [WarehouseWhereUniqueInput!]
  set: [WarehouseWhereUniqueInput!]
  create: [WarehouseCreateInput!]
  connect: [WarehouseWhereUniqueInput!]
}

input ChannelUpdateArgs {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateInput!
}

input ChannelCreateInput {
  name: String
  slug: String
  isActive: Boolean
  currencyCode: String
  publisher: PublisherRelateToOneForCreateInput
  channelPaymentMethod: ChannelPaymentMethodRelateToManyForCreateInput
  ShippingMethods: ShippingMethodRelateToManyForCreateInput
  Warehouse: WarehouseRelateToManyForCreateInput
}

input ChannelPaymentMethodRelateToManyForCreateInput {
  create: [ChannelPaymentMethodCreateInput!]
  connect: [ChannelPaymentMethodWhereUniqueInput!]
}

input ShippingMethodRelateToManyForCreateInput {
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input WarehouseRelateToManyForCreateInput {
  create: [WarehouseCreateInput!]
  connect: [WarehouseWhereUniqueInput!]
}

type Warehouse {
  id: ID!
  name: String
  slug: String
  shippingZones: JSON
  publisher: Publisher
  channel(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channelCount(where: ChannelWhereInput! = {}): Int
  Address: Address
}

input WarehouseWhereUniqueInput {
  id: ID
}

input WarehouseWhereInput {
  AND: [WarehouseWhereInput!]
  OR: [WarehouseWhereInput!]
  NOT: [WarehouseWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  publisher: PublisherWhereInput
  channel: ChannelManyRelationFilter
  Address: AddressWhereInput
}

input WarehouseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input WarehouseUpdateInput {
  name: String
  slug: String
  shippingZones: JSON
  publisher: PublisherRelateToOneForUpdateInput
  channel: ChannelRelateToManyForUpdateInput
  Address: AddressRelateToOneForUpdateInput
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input WarehouseUpdateArgs {
  where: WarehouseWhereUniqueInput!
  data: WarehouseUpdateInput!
}

input WarehouseCreateInput {
  name: String
  slug: String
  shippingZones: JSON
  publisher: PublisherRelateToOneForCreateInput
  channel: ChannelRelateToManyForCreateInput
  Address: AddressRelateToOneForCreateInput
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

type Order {
  id: ID!
  status: String
  subtotal: String
  total: String
  balancedTotal: String
  productPayment(
    where: ProductPaymentWhereInput! = {}
    orderBy: [ProductPaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductPayment!]
  productPaymentCount(where: ProductPaymentWhereInput! = {}): Int
  ShippingCarrier: ShippingCarrier
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  status: StringFilter
  subtotal: StringFilter
  total: StringFilter
  balancedTotal: StringFilter
  productPayment: ProductPaymentManyRelationFilter
  ShippingCarrier: ShippingCarrierWhereInput
}

input ProductPaymentManyRelationFilter {
  every: ProductPaymentWhereInput
  some: ProductPaymentWhereInput
  none: ProductPaymentWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  subtotal: OrderDirection
  total: OrderDirection
  balancedTotal: OrderDirection
}

input OrderUpdateInput {
  status: String
  subtotal: String
  total: String
  balancedTotal: String
  productPayment: ProductPaymentRelateToManyForUpdateInput
  ShippingCarrier: ShippingCarrierRelateToOneForUpdateInput
}

input ProductPaymentRelateToManyForUpdateInput {
  disconnect: [ProductPaymentWhereUniqueInput!]
  set: [ProductPaymentWhereUniqueInput!]
  create: [ProductPaymentCreateInput!]
  connect: [ProductPaymentWhereUniqueInput!]
}

input ShippingCarrierRelateToOneForUpdateInput {
  create: ShippingCarrierCreateInput
  connect: ShippingCarrierWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  status: String
  subtotal: String
  total: String
  balancedTotal: String
  productPayment: ProductPaymentRelateToManyForCreateInput
  ShippingCarrier: ShippingCarrierRelateToOneForCreateInput
}

input ProductPaymentRelateToManyForCreateInput {
  create: [ProductPaymentCreateInput!]
  connect: [ProductPaymentWhereUniqueInput!]
}

input ShippingCarrierRelateToOneForCreateInput {
  create: ShippingCarrierCreateInput
  connect: ShippingCarrierWhereUniqueInput
}

type ShippingCarrier {
  id: ID!
  name: String
  currency: String
  amount: String
  order: Order
  Fullfilment(
    where: FullfilmentWhereInput! = {}
    orderBy: [FullfilmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fullfilment!]
  FullfilmentCount(where: FullfilmentWhereInput! = {}): Int
}

input ShippingCarrierWhereUniqueInput {
  id: ID
}

input ShippingCarrierWhereInput {
  AND: [ShippingCarrierWhereInput!]
  OR: [ShippingCarrierWhereInput!]
  NOT: [ShippingCarrierWhereInput!]
  id: IDFilter
  name: StringFilter
  currency: StringFilter
  amount: StringFilter
  order: OrderWhereInput
  Fullfilment: FullfilmentManyRelationFilter
}

input FullfilmentManyRelationFilter {
  every: FullfilmentWhereInput
  some: FullfilmentWhereInput
  none: FullfilmentWhereInput
}

input ShippingCarrierOrderByInput {
  id: OrderDirection
  name: OrderDirection
  currency: OrderDirection
  amount: OrderDirection
}

input ShippingCarrierUpdateInput {
  name: String
  currency: String
  amount: String
  order: OrderRelateToOneForUpdateInput
  Fullfilment: FullfilmentRelateToManyForUpdateInput
}

input FullfilmentRelateToManyForUpdateInput {
  disconnect: [FullfilmentWhereUniqueInput!]
  set: [FullfilmentWhereUniqueInput!]
  create: [FullfilmentCreateInput!]
  connect: [FullfilmentWhereUniqueInput!]
}

input ShippingCarrierUpdateArgs {
  where: ShippingCarrierWhereUniqueInput!
  data: ShippingCarrierUpdateInput!
}

input ShippingCarrierCreateInput {
  name: String
  currency: String
  amount: String
  order: OrderRelateToOneForCreateInput
  Fullfilment: FullfilmentRelateToManyForCreateInput
}

input FullfilmentRelateToManyForCreateInput {
  create: [FullfilmentCreateInput!]
  connect: [FullfilmentWhereUniqueInput!]
}

type Fullfilment {
  id: ID!
  email: String
  shippedAt: String
  status: Boolean
  shippingCarrier: ShippingCarrier
  productVariant(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariantCount(where: ProductVariantWhereInput! = {}): Int
  Tracking: Tracking
}

input FullfilmentWhereUniqueInput {
  id: ID
}

input FullfilmentWhereInput {
  AND: [FullfilmentWhereInput!]
  OR: [FullfilmentWhereInput!]
  NOT: [FullfilmentWhereInput!]
  id: IDFilter
  email: StringFilter
  shippedAt: StringFilter
  status: BooleanFilter
  shippingCarrier: ShippingCarrierWhereInput
  productVariant: ProductVariantManyRelationFilter
  Tracking: TrackingWhereInput
}

input FullfilmentOrderByInput {
  id: OrderDirection
  email: OrderDirection
  shippedAt: OrderDirection
  status: OrderDirection
}

input FullfilmentUpdateInput {
  email: String
  shippedAt: String
  status: Boolean
  shippingCarrier: ShippingCarrierRelateToOneForUpdateInput
  productVariant: ProductVariantRelateToManyForUpdateInput
  Tracking: TrackingRelateToOneForUpdateInput
}

input TrackingRelateToOneForUpdateInput {
  create: TrackingCreateInput
  connect: TrackingWhereUniqueInput
  disconnect: Boolean
}

input FullfilmentUpdateArgs {
  where: FullfilmentWhereUniqueInput!
  data: FullfilmentUpdateInput!
}

input FullfilmentCreateInput {
  email: String
  shippedAt: String
  status: Boolean
  shippingCarrier: ShippingCarrierRelateToOneForCreateInput
  productVariant: ProductVariantRelateToManyForCreateInput
  Tracking: TrackingRelateToOneForCreateInput
}

input TrackingRelateToOneForCreateInput {
  create: TrackingCreateInput
  connect: TrackingWhereUniqueInput
}

type Tracking {
  id: ID!
  trackingNumber: Int
  url: String
  fullfilment: Fullfilment
}

input TrackingWhereUniqueInput {
  id: ID
}

input TrackingWhereInput {
  AND: [TrackingWhereInput!]
  OR: [TrackingWhereInput!]
  NOT: [TrackingWhereInput!]
  id: IDFilter
  trackingNumber: IntFilter
  url: StringFilter
  fullfilment: FullfilmentWhereInput
}

input TrackingOrderByInput {
  id: OrderDirection
  trackingNumber: OrderDirection
  url: OrderDirection
}

input TrackingUpdateInput {
  trackingNumber: Int
  url: String
  fullfilment: FullfilmentRelateToOneForUpdateInput
}

input FullfilmentRelateToOneForUpdateInput {
  create: FullfilmentCreateInput
  connect: FullfilmentWhereUniqueInput
  disconnect: Boolean
}

input TrackingUpdateArgs {
  where: TrackingWhereUniqueInput!
  data: TrackingUpdateInput!
}

input TrackingCreateInput {
  trackingNumber: Int
  url: String
  fullfilment: FullfilmentRelateToOneForCreateInput
}

input FullfilmentRelateToOneForCreateInput {
  create: FullfilmentCreateInput
  connect: FullfilmentWhereUniqueInput
}

type ChannelPaymentMethod {
  id: ID!
  name: String
  isAvailable: Boolean
  channel(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channelCount(where: ChannelWhereInput! = {}): Int
}

input ChannelPaymentMethodWhereUniqueInput {
  id: ID
}

input ChannelPaymentMethodWhereInput {
  AND: [ChannelPaymentMethodWhereInput!]
  OR: [ChannelPaymentMethodWhereInput!]
  NOT: [ChannelPaymentMethodWhereInput!]
  id: IDFilter
  name: StringFilter
  isAvailable: BooleanFilter
  channel: ChannelManyRelationFilter
}

input ChannelPaymentMethodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAvailable: OrderDirection
}

input ChannelPaymentMethodUpdateInput {
  name: String
  isAvailable: Boolean
  channel: ChannelRelateToManyForUpdateInput
}

input ChannelPaymentMethodUpdateArgs {
  where: ChannelPaymentMethodWhereUniqueInput!
  data: ChannelPaymentMethodUpdateInput!
}

input ChannelPaymentMethodCreateInput {
  name: String
  isAvailable: Boolean
  channel: ChannelRelateToManyForCreateInput
}

type Address {
  id: ID!
  country: String
  countryArea: String
  city: String
  zipCode: String
  streetAdress: String
  extraDetails: String
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  country: StringFilter
  countryArea: StringFilter
  city: StringFilter
  zipCode: StringFilter
  streetAdress: StringFilter
  extraDetails: StringNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  country: OrderDirection
  countryArea: OrderDirection
  city: OrderDirection
  zipCode: OrderDirection
  streetAdress: OrderDirection
  extraDetails: OrderDirection
}

input AddressUpdateInput {
  country: String
  countryArea: String
  city: String
  zipCode: String
  streetAdress: String
  extraDetails: String
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  country: String
  countryArea: String
  city: String
  zipCode: String
  streetAdress: String
  extraDetails: String
}

type ShippingMethod {
  id: ID!
  name: String
  currency: String
  amount: Float
  requeriments: JSON
}

input ShippingMethodWhereUniqueInput {
  id: ID
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  id: IDFilter
  name: StringFilter
  currency: StringFilter
  amount: FloatFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ShippingMethodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  currency: OrderDirection
  amount: OrderDirection
}

input ShippingMethodUpdateInput {
  name: String
  currency: String
  amount: Float
  requeriments: JSON
}

input ShippingMethodUpdateArgs {
  where: ShippingMethodWhereUniqueInput!
  data: ShippingMethodUpdateInput!
}

input ShippingMethodCreateInput {
  name: String
  currency: String
  amount: Float
  requeriments: JSON
}

type ProductStock {
  id: ID!
  sku: String
  stock: Int
}

input ProductStockWhereUniqueInput {
  id: ID
}

input ProductStockWhereInput {
  AND: [ProductStockWhereInput!]
  OR: [ProductStockWhereInput!]
  NOT: [ProductStockWhereInput!]
  id: IDFilter
  sku: StringFilter
  stock: IntFilter
}

input ProductStockOrderByInput {
  id: OrderDirection
  sku: OrderDirection
  stock: OrderDirection
}

input ProductStockUpdateInput {
  sku: String
  stock: Int
}

input ProductStockUpdateArgs {
  where: ProductStockWhereUniqueInput!
  data: ProductStockUpdateInput!
}

input ProductStockCreateInput {
  sku: String
  stock: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPermissionGroup(data: PermissionGroupCreateInput!): PermissionGroup
  createPermissionGroups(
    data: [PermissionGroupCreateInput!]!
  ): [PermissionGroup]
  updatePermissionGroup(
    where: PermissionGroupWhereUniqueInput!
    data: PermissionGroupUpdateInput!
  ): PermissionGroup
  updatePermissionGroups(data: [PermissionGroupUpdateArgs!]!): [PermissionGroup]
  deletePermissionGroup(
    where: PermissionGroupWhereUniqueInput!
  ): PermissionGroup
  deletePermissionGroups(
    where: [PermissionGroupWhereUniqueInput!]!
  ): [PermissionGroup]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(
    where: PermissionWhereUniqueInput!
    data: PermissionUpdateInput!
  ): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createPricing(data: PricingCreateInput!): Pricing
  createPricings(data: [PricingCreateInput!]!): [Pricing]
  updatePricing(
    where: PricingWhereUniqueInput!
    data: PricingUpdateInput!
  ): Pricing
  updatePricings(data: [PricingUpdateArgs!]!): [Pricing]
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deletePricings(where: [PricingWhereUniqueInput!]!): [Pricing]
  createDiscount(data: DiscountCreateInput!): Discount
  createDiscounts(data: [DiscountCreateInput!]!): [Discount]
  updateDiscount(
    where: DiscountWhereUniqueInput!
    data: DiscountUpdateInput!
  ): Discount
  updateDiscounts(data: [DiscountUpdateArgs!]!): [Discount]
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteDiscounts(where: [DiscountWhereUniqueInput!]!): [Discount]
  createDiscountRule(data: DiscountRuleCreateInput!): DiscountRule
  createDiscountRules(data: [DiscountRuleCreateInput!]!): [DiscountRule]
  updateDiscountRule(
    where: DiscountRuleWhereUniqueInput!
    data: DiscountRuleUpdateInput!
  ): DiscountRule
  updateDiscountRules(data: [DiscountRuleUpdateArgs!]!): [DiscountRule]
  deleteDiscountRule(where: DiscountRuleWhereUniqueInput!): DiscountRule
  deleteDiscountRules(where: [DiscountRuleWhereUniqueInput!]!): [DiscountRule]
  createProductType(data: ProductTypeCreateInput!): ProductType
  createProductTypes(data: [ProductTypeCreateInput!]!): [ProductType]
  updateProductType(
    where: ProductTypeWhereUniqueInput!
    data: ProductTypeUpdateInput!
  ): ProductType
  updateProductTypes(data: [ProductTypeUpdateArgs!]!): [ProductType]
  deleteProductType(where: ProductTypeWhereUniqueInput!): ProductType
  deleteProductTypes(where: [ProductTypeWhereUniqueInput!]!): [ProductType]
  createAttribute(data: AttributeCreateInput!): Attribute
  createAttributes(data: [AttributeCreateInput!]!): [Attribute]
  updateAttribute(
    where: AttributeWhereUniqueInput!
    data: AttributeUpdateInput!
  ): Attribute
  updateAttributes(data: [AttributeUpdateArgs!]!): [Attribute]
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteAttributes(where: [AttributeWhereUniqueInput!]!): [Attribute]
  createProductPayment(data: ProductPaymentCreateInput!): ProductPayment
  createProductPayments(data: [ProductPaymentCreateInput!]!): [ProductPayment]
  updateProductPayment(
    where: ProductPaymentWhereUniqueInput!
    data: ProductPaymentUpdateInput!
  ): ProductPayment
  updateProductPayments(data: [ProductPaymentUpdateArgs!]!): [ProductPayment]
  deleteProductPayment(where: ProductPaymentWhereUniqueInput!): ProductPayment
  deleteProductPayments(
    where: [ProductPaymentWhereUniqueInput!]!
  ): [ProductPayment]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(
    where: CollectionWhereUniqueInput!
    data: CollectionUpdateInput!
  ): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(
    where: PublisherWhereUniqueInput!
    data: PublisherUpdateInput!
  ): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createCommision(data: CommisionCreateInput!): Commision
  createCommisions(data: [CommisionCreateInput!]!): [Commision]
  updateCommision(
    where: CommisionWhereUniqueInput!
    data: CommisionUpdateInput!
  ): Commision
  updateCommisions(data: [CommisionUpdateArgs!]!): [Commision]
  deleteCommision(where: CommisionWhereUniqueInput!): Commision
  deleteCommisions(where: [CommisionWhereUniqueInput!]!): [Commision]
  createChannel(data: ChannelCreateInput!): Channel
  createChannels(data: [ChannelCreateInput!]!): [Channel]
  updateChannel(
    where: ChannelWhereUniqueInput!
    data: ChannelUpdateInput!
  ): Channel
  updateChannels(data: [ChannelUpdateArgs!]!): [Channel]
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteChannels(where: [ChannelWhereUniqueInput!]!): [Channel]
  createWarehouse(data: WarehouseCreateInput!): Warehouse
  createWarehouses(data: [WarehouseCreateInput!]!): [Warehouse]
  updateWarehouse(
    where: WarehouseWhereUniqueInput!
    data: WarehouseUpdateInput!
  ): Warehouse
  updateWarehouses(data: [WarehouseUpdateArgs!]!): [Warehouse]
  deleteWarehouse(where: WarehouseWhereUniqueInput!): Warehouse
  deleteWarehouses(where: [WarehouseWhereUniqueInput!]!): [Warehouse]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createShippingCarrier(data: ShippingCarrierCreateInput!): ShippingCarrier
  createShippingCarriers(
    data: [ShippingCarrierCreateInput!]!
  ): [ShippingCarrier]
  updateShippingCarrier(
    where: ShippingCarrierWhereUniqueInput!
    data: ShippingCarrierUpdateInput!
  ): ShippingCarrier
  updateShippingCarriers(data: [ShippingCarrierUpdateArgs!]!): [ShippingCarrier]
  deleteShippingCarrier(
    where: ShippingCarrierWhereUniqueInput!
  ): ShippingCarrier
  deleteShippingCarriers(
    where: [ShippingCarrierWhereUniqueInput!]!
  ): [ShippingCarrier]
  createFullfilment(data: FullfilmentCreateInput!): Fullfilment
  createFullfilments(data: [FullfilmentCreateInput!]!): [Fullfilment]
  updateFullfilment(
    where: FullfilmentWhereUniqueInput!
    data: FullfilmentUpdateInput!
  ): Fullfilment
  updateFullfilments(data: [FullfilmentUpdateArgs!]!): [Fullfilment]
  deleteFullfilment(where: FullfilmentWhereUniqueInput!): Fullfilment
  deleteFullfilments(where: [FullfilmentWhereUniqueInput!]!): [Fullfilment]
  createTracking(data: TrackingCreateInput!): Tracking
  createTrackings(data: [TrackingCreateInput!]!): [Tracking]
  updateTracking(
    where: TrackingWhereUniqueInput!
    data: TrackingUpdateInput!
  ): Tracking
  updateTrackings(data: [TrackingUpdateArgs!]!): [Tracking]
  deleteTracking(where: TrackingWhereUniqueInput!): Tracking
  deleteTrackings(where: [TrackingWhereUniqueInput!]!): [Tracking]
  createChannelPaymentMethod(
    data: ChannelPaymentMethodCreateInput!
  ): ChannelPaymentMethod
  createChannelPaymentMethods(
    data: [ChannelPaymentMethodCreateInput!]!
  ): [ChannelPaymentMethod]
  updateChannelPaymentMethod(
    where: ChannelPaymentMethodWhereUniqueInput!
    data: ChannelPaymentMethodUpdateInput!
  ): ChannelPaymentMethod
  updateChannelPaymentMethods(
    data: [ChannelPaymentMethodUpdateArgs!]!
  ): [ChannelPaymentMethod]
  deleteChannelPaymentMethod(
    where: ChannelPaymentMethodWhereUniqueInput!
  ): ChannelPaymentMethod
  deleteChannelPaymentMethods(
    where: [ChannelPaymentMethodWhereUniqueInput!]!
  ): [ChannelPaymentMethod]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod
  createShippingMethods(data: [ShippingMethodCreateInput!]!): [ShippingMethod]
  updateShippingMethod(
    where: ShippingMethodWhereUniqueInput!
    data: ShippingMethodUpdateInput!
  ): ShippingMethod
  updateShippingMethods(data: [ShippingMethodUpdateArgs!]!): [ShippingMethod]
  deleteShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteShippingMethods(
    where: [ShippingMethodWhereUniqueInput!]!
  ): [ShippingMethod]
  createProductStock(data: ProductStockCreateInput!): ProductStock
  createProductStocks(data: [ProductStockCreateInput!]!): [ProductStock]
  updateProductStock(
    where: ProductStockWhereUniqueInput!
    data: ProductStockUpdateInput!
  ): ProductStock
  updateProductStocks(data: [ProductStockUpdateArgs!]!): [ProductStock]
  deleteProductStock(where: ProductStockWhereUniqueInput!): ProductStock
  deleteProductStocks(where: [ProductStockWhereUniqueInput!]!): [ProductStock]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  permissionGroups(
    where: PermissionGroupWhereInput! = {}
    orderBy: [PermissionGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PermissionGroup!]
  permissionGroup(where: PermissionGroupWhereUniqueInput!): PermissionGroup
  permissionGroupsCount(where: PermissionGroupWhereInput! = {}): Int
  permissions(
    where: PermissionWhereInput! = {}
    orderBy: [PermissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Permission!]
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionsCount(where: PermissionWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  pricings(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  pricing(where: PricingWhereUniqueInput!): Pricing
  pricingsCount(where: PricingWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discount(where: DiscountWhereUniqueInput!): Discount
  discountsCount(where: DiscountWhereInput! = {}): Int
  discountRules(
    where: DiscountRuleWhereInput! = {}
    orderBy: [DiscountRuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountRule!]
  discountRule(where: DiscountRuleWhereUniqueInput!): DiscountRule
  discountRulesCount(where: DiscountRuleWhereInput! = {}): Int
  productTypes(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productType(where: ProductTypeWhereUniqueInput!): ProductType
  productTypesCount(where: ProductTypeWhereInput! = {}): Int
  attributes(
    where: AttributeWhereInput! = {}
    orderBy: [AttributeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attribute!]
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributesCount(where: AttributeWhereInput! = {}): Int
  productPayments(
    where: ProductPaymentWhereInput! = {}
    orderBy: [ProductPaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductPayment!]
  productPayment(where: ProductPaymentWhereUniqueInput!): ProductPayment
  productPaymentsCount(where: ProductPaymentWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  commisions(
    where: CommisionWhereInput! = {}
    orderBy: [CommisionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Commision!]
  commision(where: CommisionWhereUniqueInput!): Commision
  commisionsCount(where: CommisionWhereInput! = {}): Int
  channels(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channel(where: ChannelWhereUniqueInput!): Channel
  channelsCount(where: ChannelWhereInput! = {}): Int
  warehouses(
    where: WarehouseWhereInput! = {}
    orderBy: [WarehouseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Warehouse!]
  warehouse(where: WarehouseWhereUniqueInput!): Warehouse
  warehousesCount(where: WarehouseWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  shippingCarriers(
    where: ShippingCarrierWhereInput! = {}
    orderBy: [ShippingCarrierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingCarrier!]
  shippingCarrier(where: ShippingCarrierWhereUniqueInput!): ShippingCarrier
  shippingCarriersCount(where: ShippingCarrierWhereInput! = {}): Int
  fullfilments(
    where: FullfilmentWhereInput! = {}
    orderBy: [FullfilmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fullfilment!]
  fullfilment(where: FullfilmentWhereUniqueInput!): Fullfilment
  fullfilmentsCount(where: FullfilmentWhereInput! = {}): Int
  trackings(
    where: TrackingWhereInput! = {}
    orderBy: [TrackingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tracking!]
  tracking(where: TrackingWhereUniqueInput!): Tracking
  trackingsCount(where: TrackingWhereInput! = {}): Int
  channelPaymentMethods(
    where: ChannelPaymentMethodWhereInput! = {}
    orderBy: [ChannelPaymentMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ChannelPaymentMethod!]
  channelPaymentMethod(
    where: ChannelPaymentMethodWhereUniqueInput!
  ): ChannelPaymentMethod
  channelPaymentMethodsCount(where: ChannelPaymentMethodWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  productStocks(
    where: ProductStockWhereInput! = {}
    orderBy: [ProductStockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductStock!]
  productStock(where: ProductStockWhereUniqueInput!): ProductStock
  productStocksCount(where: ProductStockWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
